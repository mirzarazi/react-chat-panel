import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchMessage } from './chatAPI';
export const initialState = {
  activeChat: 'Lilly',
  contacts: [
    {
      id: 'Lilly',
      name: 'Lilly',
      status: 'available',
      avatar: 'https://chatscope.io/storybook/react/static/media/lilly.62d4acff.svg',
      activity: 'idle',
      history:[
        {
          direction: 'outgoing',
          message: 'hello',
          date: 1,
        },
        {
          direction: 'incoming',
          message: 'hello',
          date: 2,
        },
        {
          direction: 'outgoing',
          message: 'how are you?',
          date: 3,
        },

      ]
    },
    {
      id: 'Joe',
      name: 'Joe',
      status: 'dnd',
      avatar: 'https://chatscope.io/storybook/react/static/media/joe.641da105.svg',
      activity: 'idle',
      history:[
        {
          direction: 'outgoing',
          message: 'hello',
          date: 1,
        },
        {
          direction: 'incoming',
          message: 'hello',
          date: 2,
          status: 'unread'
        },

      ]
      
    },
    {
      id: 'Kai',
      name: 'Kai',
      status: 'away',
      avatar: 'https://chatscope.io/storybook/react/static/media/kai.b62f69dc.svg',
      activity: 'idle',
      history:[
        {
          direction: 'outgoing',
          message: 'hello',
          date: 1,
        },
        {
          direction: 'incoming',
          message: 'hello',
          date: 2,
        },
        {
          direction: 'incoming',
          message: 'how are you?',
          date: 3,
        },

      ]
      
    }
  ]
};

const getLast = (list = [], param) => {
  return [...list].sort((a, b)=> b[param] - a[param]);
}

export const selectConversations = (state) => {
  return state.chat.contacts.map(contact=>{
    let lastMessage = getLast(contact.history, 'date')[0];
    return {
    id: contact.id,
    lastMessage: lastMessage?.message,
    lastSender: lastMessage?.direction === 'outgoing'? 'me': contact.name,
    status: contact.status,
    avatar: contact.avatar,
    name: contact.name,
    active: contact.id===state.chat.activeChat
  }})
}

export const selectActiveChat = (state) => {
  const contact = state.chat.contacts.find(contact=>contact.id===state.chat.activeChat);
  return {
    avatar: contact.avatar,
    name: contact.name,
    id: contact.id,
    activity: contact.activity,
    messages: [...contact.history].sort((a, b)=> a.date - b.date)
  }
}

export const sendMessage = createAsyncThunk(
  'chat/send',
  async (message) => {
    const response = await fetchMessage(message);
    return response.data;
  }
);

export const chatSlice = createSlice({
  name: 'chat',
  initialState,
  reducers: {
    activateChat: (state, action) => {
      state.activeChat = action.payload;
    },
  },
  
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(sendMessage.pending, (state, action) => {
        state.contacts.find(contact=>contact.id === state.activeChat).history.push( {
          message: action.meta.arg,
          direction: 'outgoing',
          date: new Date().getTime(),
        })
        state.contacts.find(contact=>contact.id === state.activeChat).activity = 'typing'
        console.log(state.contacts.find(contact=>contact.id === state.activeChat).activity )
      })
      .addCase(sendMessage.fulfilled, (state, action) => {
        state.contacts.find(contact=>contact.id === state.activeChat).history.push( {
          message: action.payload,
          direction: 'incoming',
          date: new Date().getTime(),
        })
        state.contacts.find(contact=>contact.id === state.activeChat).activity = 'idle'
      });
  },
});
export const { activateChat } = chatSlice.actions;
// export const 
export default chatSlice.reducer;